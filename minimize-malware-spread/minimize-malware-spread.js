/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
    initial.sort((a, b) => a - b);
    let infected = new Set(initial);
    let max = 0;
    let res = initial[0];
    
    for (let node of initial) {
        let visited = new Set();
        let containsOtherInf = [false];
        
        let len = dfs(node, node, graph, visited, containsOtherInf, infected);
        
        if (containsOtherInf[0]) {
            continue;
        }
        
        if (len > max) {
            max = len;
            res = node;
        }
    }
    
    return res;
};

const dfs = (start, initialNode, graph, visited, containsOtherInf, infected) => {
    if (visited.has(start) || containsOtherInf[0]) {
        return 0;
    }
    
    let count = 1;
    visited.add(start);
    
    for (let i = 0; i < graph[start].length; i += 1) {
        if (graph[start][i] === 1) {
            if (i !== initialNode && infected.has(i)) {
                containsOtherInf[0] = true;
                break;
            }
            count += dfs(i, initialNode, graph, visited, containsOtherInf, infected);
        }
    }
    return count;
};